// DeformationTransferSameTopology.cpp : Defines the entry point for the console application.
//

#include <stdio.h>
#include "MeshTransfer.h"
#include "Renderable\ObjMesh.h"
#include "KDTree.h"
#include "fuauth.h"
#include <thread>
#include <fstream>

#define TRANSFER_API __declspec(dllexport)

extern "C" {
	struct partsInfo {
		unsigned int* indices;
		unsigned int* size;
		int sizeLength;
	};
	struct anchorStruct {
		unsigned int* indices;
		int length;
		int row;
		int col;
	};
}

typedef void(__stdcall *PREPROCESSCALLBACK)(unsigned int* lashPairs, int lashPairSize, unsigned int* browTris, int browTrisSize, int errorCode);
typedef void(__stdcall *INFOCALLBACK)(float* vertexes, int size, int errorCode, int row, int col);

extern "C" {
	//TRANSFER_API int DeformationTransfer(int argc, const char* argv[]);
	TRANSFER_API void preprocess(MeshInfo* src, partsInfo* lashInfo, partsInfo* browInfo, PREPROCESSCALLBACK callBack);
	TRANSFER_API void transferMesh(MeshInfo* src0, MeshInfo* src1, MeshInfo* trg0, INFOCALLBACK callback, anchorStruct* anchors, partsInfo* lashInfo, partsInfo* browInfo);
	TRANSFER_API void getVisionNumber(int* number);
	//TRANSFER_API void test(MeshInfo* mesh, deformationInfo* info);
}

static bool loadbinary(const std::string& filepath, std::vector<char>& data)
{
	std::ifstream in;
	in.open(filepath, std::ios::in);
	if (!in.is_open()) {
		std::cout << "open File Failed." << std::endl;
		return false;
	}
	char c;
	bool bMinus = false;
	std::vector<char> oneNumber;
	while (in.get(c)) {
		if (c == '\n' || c == ' ') {
			continue;
		}
		else if (c == '-') {
			bMinus = true;
		}
		else if (c == ',') {
			// clear and add one number to vector
			char num = 0;
			int mul = 1;
			for (int i = oneNumber.size() - 1; i >= 0; i--)
			{
				num += (oneNumber[i] - 48) * mul;
				mul *= 10;
			}
			if (bMinus) {
				num *= -1;
			}
			data.push_back(num);
			oneNumber.clear();
			bMinus = false;
		}
		else {
			oneNumber.push_back(c);
		}
	}
	char num = 0;
	int mul = 1;
	for (int i = oneNumber.size() - 1; i >= 0; i--)
	{
		num += (oneNumber[i] - 48) * mul;
		mul *= 10;
	}
	if (bMinus) {
		num *= -1;
	}
	data.push_back(num);
	return true;
}

static std::string GetExePath(void)
{
	char szFilePath[MAX_PATH + 1] = { 0 };
	GetModuleFileNameA(NULL, szFilePath, MAX_PATH);
	(strrchr(szFilePath, '\\'))[0] = 0; // 删除文件名，只获得路径字串  
	std::string path = szFilePath;
	return path;
}

static void objMeshGetFace(const ObjMesh& mesh, std::vector<MeshTransfer::Int3>& triangles)
{
	triangles.clear();
	for (size_t iFace = 0; iFace < mesh.face_list.size(); iFace++)
	{
		const ObjMesh::obj_face& f = mesh.face_list[iFace];
		for (int k = 0; k < f.vertex_count - 2; k++)
			triangles.push_back(MeshTransfer::Int3(f.vertex_index[0], f.vertex_index[k+1], f.vertex_index[k+2]));
	}
}

static void objMeshGetVerts(const ObjMesh& mesh, std::vector<MeshTransfer::Float3>& verts)
{
	verts.resize(mesh.vertex_list.size());
	for (size_t iVert = 0; iVert < mesh.vertex_list.size(); iVert++)
		verts[iVert] = MeshTransfer::Float3(mesh.vertex_list[iVert][0], mesh.vertex_list[iVert][1], mesh.vertex_list[iVert][2]);
}

static void objMeshSetVerts(ObjMesh& mesh, const std::vector<MeshTransfer::Float3>& verts)
{
	mesh.vertex_list.resize(verts.size());
	for (size_t iVert = 0; iVert < mesh.vertex_list.size(); iVert++)
		mesh.vertex_list[iVert] = ldp::Float3(verts[iVert][0], verts[iVert][1], verts[iVert][2]);
}


static double distance(double a[3], double b[3]) {
	return (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]) + (a[2] - b[2]) * (a[2] - b[2]);
}

void calculateRun(std::vector<MeshTransfer::Int3> triangles, std::vector<MeshTransfer::Float3> srcVerts0, std::vector<MeshTransfer::Float3> tarVerts0, std::vector<MeshTransfer::Float3> srcVerts1, INFOCALLBACK callback, std::vector<int> anchors, int row, int col, std::vector<Eigen::Vector2i> pairs) {

	MeshTransfer transfer;
	std::vector<MeshTransfer::Float3> tarVerts1;
	float* v = (float*)malloc(3 * tarVerts0.size() * sizeof(float));
	int errorCode = 0x01;

	static bool authed = false;
	static bool authSuccess = false;

	std::string path = GetExePath();
	std::string authPath = path + "\\auth.txt";
	std::vector<char> authData;
	if (!authed) {
		if (loadbinary(authPath, authData) == false) {
			std::cout << "load auth bundle failed" << std::endl;
			errorCode = -8;
			callback(v, tarVerts0.size(), errorCode, row, col);
			delete v;
			return;
		}
		else 
		{
			/*std::string debugPath = path + "\\debug.bin";
			std::ofstream fout(debugPath, std::ios::binary);
			if (false == fout.good())
			{
				fout.close();
			}
			else {
				fout.write(&authData[0], authData.size());
				fout.close();
			}*/
			int result = fuauth_setup(&authData[0], authData.size());
			if (result) {
				std::cout << "auth success" << std::endl;
				authSuccess = true;
			}
		}
		authed = true;
	}

	if (!authSuccess) {
		errorCode = -9;
		callback(v, tarVerts0.size(), errorCode, row, col);
		delete v;
		return;
	}
	
	errorCode = transfer.init((int)triangles.size(), triangles.data(), (int)srcVerts0.size(), srcVerts0.data(), tarVerts0.data(), anchors, pairs);
	if (errorCode != 1)
	{
		callback(v, tarVerts0.size(), errorCode, row, col);
		delete v;
		return;
	}

	errorCode = transfer.transfer(srcVerts1, tarVerts1);
	if (errorCode != 1)
	{
		printf("%s\n", transfer.getErrString());
		callback(v, tarVerts0.size(), errorCode, row, col);
		delete v;
		return;
	}

	for (size_t i = 0; i < tarVerts1.size(); i++)
	{

		v[3 * i] = tarVerts1[i][0];
		v[3 * i + 1] = tarVerts1[i][1];
		v[3 * i + 2] = tarVerts1[i][2];
	}
	callback(v, tarVerts0.size(), errorCode, row, col);
	delete v;
	return;
}

TRANSFER_API void getVisionNumber(int* number) {
	number[0] = 2;
	number[1] = 0;
	number[2] = 0;
}

// partsInfo here, lash info lash info lash info lash info brow info brow info
// maya interface
TRANSFER_API void transferMesh(MeshInfo* src0, MeshInfo* src1, MeshInfo* trg0, INFOCALLBACK callback, anchorStruct* anchors, partsInfo* lashInfo, partsInfo* browInfo) {
	// add brow to face
	std::vector<unsigned int> browSize;
	for (size_t i = 0; i < browInfo->sizeLength; i++)
	{
		browSize.push_back(browInfo->size[i]);
	}

	std::vector<unsigned int> browTriIndices;
	int size = 0;
	for (size_t i = 0; i < browSize.size(); i++)
	{
		for (size_t j = size; j < size + browSize[i]; j++)
		{
			browTriIndices.push_back(browInfo->indices[j]);
		}
		size += browSize[i];
	}

	//info->errorCode = 0x00;
	ObjMesh srcMesh0(src0);
	ObjMesh tarMesh0(trg0);
	std::vector<MeshTransfer::Float3> srcVerts0, srcVerts1, tarVerts0;
	std::vector<MeshTransfer::Int3> triangles;

	objMeshGetFace(srcMesh0, triangles);
	objMeshGetVerts(srcMesh0, srcVerts0);
	objMeshGetVerts(tarMesh0, tarVerts0);

	// add triangle to brow

	for (size_t i = 0; i < browTriIndices.size() / 3; i++)
	{
		triangles.push_back(MeshTransfer::Int3(browTriIndices[3 * i], browTriIndices[3 * i + 1], browTriIndices[3 * i + 2]));
	}

	//triangles.push_back(MeshTransfer::Int3(8145, 971, 3097));
	//triangles.push_back(MeshTransfer::Int3(8314, 5043, 7078));
	//triangles.push_back(MeshTransfer::Int3(8088, 2851, 975));
	//triangles.push_back(MeshTransfer::Int3(8257, 5047, 6848));

	ObjMesh srcMesh1(src1);
	objMeshGetVerts(srcMesh1, srcVerts1);
	std::vector<MeshTransfer::Float3> tarVerts1;

	std::vector<int> anc;
	for (size_t i = 0; i < anchors->length; i++)
	{
		anc.push_back(anchors->indices[i]);
	}

	std::vector<Eigen::Vector2i> pairs;
	for (size_t i = 0; i < lashInfo->size[0]; i++)
	{
		pairs.push_back(Eigen::Vector2i(lashInfo->indices[2 * i], lashInfo->indices[2 * i + 1]));
	}

	calculateRun(triangles, srcVerts0, tarVerts0, srcVerts1, callback, anc, anchors->row, anchors->col, pairs);
	//std::thread t(calculateRun, triangles, srcVerts0, tarVerts0, srcVerts1, callback, anc, anchors->row, anchors->col);
	//t.detach();
}


TRANSFER_API void preprocess(MeshInfo* src, partsInfo* lashInfo, partsInfo* browInfo, PREPROCESSCALLBACK callBack) {
	ObjMesh srcMesh(src);
	std::vector<MeshTransfer::Float3> srcVertex;
	objMeshGetVerts(srcMesh, srcVertex);
	int errorCode = 0x01;
	

	std::vector<std::vector<unsigned int>> partsIndices;

	std::vector<unsigned int> sizeArr;
	for (size_t i = 0; i < lashInfo->sizeLength; i++)
	{
		sizeArr.push_back(lashInfo->size[i]);
	}
	unsigned int size = 0;
	for (size_t i = 0; i < lashInfo->sizeLength; i++)
	{
		std::vector<unsigned int> partIndices;
		for (size_t j = size; j < size + sizeArr[i]; j++)
		{
			partIndices.push_back(lashInfo->indices[j]);
		}
		size += sizeArr[i];
		partsIndices.push_back(partIndices);
	}


	std::vector<std::vector<unsigned int>> browIndices;
	std::vector<unsigned int> browSizeArr;
	for (size_t i = 0; i < browInfo->sizeLength; i++)
	{
		browSizeArr.push_back(browInfo->size[i]);
	}
	size = 0;
	for (size_t i = 0; i < browInfo->sizeLength; i++)
	{
		std::vector<unsigned int> partIndices;
		for (size_t j = size; j < size + browSizeArr[i]; j++)
		{
			partIndices.push_back(browInfo->indices[j]);
		}
		size += browSizeArr[i];
		browIndices.push_back(partIndices);
	}
	
	// face indices at beginning!!!
	kdtree* tree = kd_create(3);
	for (size_t i = 0; i < partsIndices[0].size(); i++)
	{
		double pos[3] = {srcMesh.vertex_list[partsIndices[0][i]][0], srcMesh.vertex_list[partsIndices[0][i]][1], srcMesh.vertex_list[partsIndices[0][i]][2]};
		kd_insert(tree, pos, &partsIndices[0][i]);
	}


	std::vector<std::vector<std::pair<unsigned int, unsigned int>>> connects;
	int lashPairsSize = 0;
	// query
	for (size_t i = 1; i < partsIndices.size(); i++)
	{
		std::vector<unsigned int> pIndices = partsIndices[i];
		std::vector<std::pair<unsigned int, unsigned int>> connect;
		std::map<double, std::pair<unsigned int, unsigned int>> dIndexMap;
		for (size_t j = 0; j < pIndices.size(); j++)
		{
			double pos[3] = { srcMesh.vertex_list[pIndices[j]][0], srcMesh.vertex_list[pIndices[j]][1], srcMesh.vertex_list[pIndices[j]][2] };
			kdres* set = kd_nearest(tree, pos);
			double nearest_pos[3] = { 0 , 0, 0 };
			int index = *(int *)kd_res_item(set, nearest_pos);
			double d = distance(nearest_pos, pos);
			auto pair = std::pair<unsigned int, unsigned int>(index, pIndices[j]);
			dIndexMap[d] = pair;
			kd_res_free(set);
		}
		// lash
		int connectCount = 0;
		for (auto iter = dIndexMap.begin(); iter != dIndexMap.end(); iter++) {
			if (connectCount >= 10)
			{
				break;
			}
			if (abs(iter->first - 0.0) >= 0.000001)
			{
				connectCount++;
			}
			connect.push_back(iter->second);
		}
		connects.push_back(connect);
		lashPairsSize += connect.size();
	}

	unsigned int browIndicesSize = 0;
	for (size_t i = 0; i < browIndices.size(); i++)
	{
		browIndicesSize += browIndices[i].size();
	}

	unsigned int* lashPairIndices = (unsigned int*)malloc(2 * lashPairsSize * sizeof(unsigned int));
	

	//brow 
	
	std::vector<unsigned int> tmp;
	for (size_t i = 0; i < browIndices.size(); i++)
	{
		std::vector<unsigned int> pIndices = browIndices[i];
		std::vector<unsigned int> dminIndices = {0, 0, 0};
		std::map<double, std::vector<unsigned int>> distanceIndexMap;
		for (size_t j = 0; j < pIndices.size() - 1; j++)
		{
			double pos1[3] = { srcMesh.vertex_list[pIndices[j]][0], srcMesh.vertex_list[pIndices[j]][1], srcMesh.vertex_list[pIndices[j]][2] };
			kdres* set = kd_nearest(tree, pos1);
			double nearest_pos[3] = { 0 , 0, 0 };
			int index1 = *(int *)kd_res_item(set, nearest_pos);
			double d = distance(nearest_pos, pos1);
			if (index1 != pIndices[j] && index1 != pIndices[j + 1] && pIndices[j] != pIndices[j + 1])
			{
				dminIndices[0] = index1;
				dminIndices[1] = pIndices[j];
				dminIndices[2] = pIndices[j + 1];
				distanceIndexMap[d] = dminIndices;
			}
			kd_res_free(set);
		}
		int browConnectCount = 0;
		for (auto iter = distanceIndexMap.begin(); iter != distanceIndexMap.end(); iter++) {
			if (browConnectCount >= 1)
			{
				break;
			}
			if (abs(iter->first - 0.0) >= 0.000001)
			{
				browConnectCount++;
			}
			tmp.insert(tmp.end(), iter->second.begin(), iter->second.end());
		}
	}
	kd_free(tree);

	unsigned int* browTriangles = (unsigned int*)malloc(tmp.size() * sizeof(unsigned int)); // one vertex two triangle
	for (size_t i = 0; i < tmp.size(); i++)
	{
		browTriangles[i] = tmp[i];
	}

	int beginIndex = 0;
	for (size_t i = 0; i < connects.size(); i++)
	{
		for (size_t j = beginIndex; j < beginIndex + connects[i].size(); j++)
		{
			lashPairIndices[2 * j] = connects[i][j - beginIndex].first;
			lashPairIndices[2 * j + 1] = connects[i][j - beginIndex].second;
			//lashPairIndices[2 * j] = 2 * j;
			//lashPairIndices[2 * j + 1] = 2 * j + 1;
		}
		beginIndex += connects[i].size();
	}
	callBack(lashPairIndices, lashPairsSize, browTriangles, browIndices.size(), errorCode);
	free(lashPairIndices);
	free(browTriangles);
}

int kdTreemain() {
	ObjMesh srcMesh;
	srcMesh.loadObj("G://resource/0.obj",false, false);
	std::vector<MeshTransfer::Float3> srcVerts;
	//objMeshGetVerts(srcMesh, srcVerts);

	int face[6424] = {};


	int jiemao[58] = { 0, 2, 1, 7, 36, 28, 27, 4, 3, 6, 5, 12, 22, 21, 20, 19, 18, 17, 104, 77, 103, 46, 47, 48, 49, 50, 51, 41, 32, 33, 30, 31, 26, 25, 35, 34, 24, 23, 29, 42, 43, 44, 45, 38, 37, 40, 39, 78, 52, 129, 10, 11, 8, 9, 16, 15, 14, 13 };

	kdtree* kd = kd_create(3);

	for (size_t i = 0; i < 6424; i++)
	{
		double pos[3] = {srcMesh.vertex_list[face[i]][0], srcMesh.vertex_list[face[i]][1], srcMesh.vertex_list[face[i]][2]};
		kd_insert(kd, pos, &face[i]);
	}
	
	for (size_t i = 0; i < 58; i++)
	{

		double pos[3] = {srcMesh.vertex_list[jiemao[i]][0], srcMesh.vertex_list[jiemao[i]][1], srcMesh.vertex_list[jiemao[i]][2]};

		kdres* set = kd_nearest(kd, pos);
		double nearest_pos[3] = { 0 , 0, 0 };
		int index = *(int *)kd_res_item(set, nearest_pos);
		std::cout << distance(nearest_pos, pos) << std::endl;
		kd_res_free(set);
	}
	kd_free(kd);
	return 0;
}

extern char g_auth_package[];

int tmain(int argc, const char* argv[])
{

	std::string path = GetExePath();
	std::string authPath = path + "\\auth.txt";
	std::vector<char> authData;
	if (loadbinary(authPath, authData) == false) {
		std::cout << "load auth bundle failed" << std::endl;

		return 0;
	}
	else {
		std::string debugPath = path + "\\debug.bin";
		std::ofstream fout(debugPath, std::ios::binary);
		if (false == fout.good())
		{
			fout.close();
		}
		else {
			fout.write(&authData[0], authData.size());
			fout.close();
		}
		int result =  fuauth_setup(&authData[0],  authData.size());
		if (result) {
			std::cout << "auth success" << std::endl;
		}
		else
		{
			std::cout << "auth failed" << std::endl;
			return 0;
		}
	}
	return 0;

	int gc = 4;
	char* gv[4] = { "","G://resource/","G://resource/result/0.obj","G://resource/result" };

	ObjMesh srcMesh0, tarMesh0;
	std::vector<MeshTransfer::Float3> srcVerts0, srcVerts1, tarVerts0;
	std::vector<MeshTransfer::Int3> triangles;

	std::string src_folder("G://resource/");
	std::string result_folder("");
	if (src_folder.back() != '/' && src_folder.back() != '\\')
		src_folder.append("/");
	if (gc == 4)
		result_folder = gv[3];
	if (result_folder != "")
	{
		if (result_folder.back() != '/' && result_folder.back() != '\\')
			result_folder.append("/");
	}

#ifdef _WIN32
	std::string win_result_folder = result_folder;
	for (auto& c : win_result_folder)
	{
		if (c == '/')
			c = '\\';
	}
	DWORD dwAttrib = GetFileAttributesA(win_result_folder.c_str());

	if (!(dwAttrib != INVALID_FILE_ATTRIBUTES && (dwAttrib & FILE_ATTRIBUTE_DIRECTORY)))
	{
		char cmd[1024];
		sprintf_s(cmd, "mkdir %s", win_result_folder.c_str());
		printf("%s\n", cmd);
		system(cmd);
	}
#endif

	if (!srcMesh0.loadObj((src_folder + "0.obj").c_str(), false, false))
	{
		printf("Error, source mesh not found: %s\n", (src_folder + "0.obj").c_str());
		return -1;
	}
	if (!tarMesh0.loadObj(gv[2], false, false))
	{
		printf("Error, target mesh not found: %s\n", gv[2]);
		return -1;
	}

	objMeshGetFace(srcMesh0, triangles);
	objMeshGetVerts(srcMesh0, srcVerts0);
	objMeshGetVerts(tarMesh0, tarVerts0);

	enum {NUM_THREADS = 1};
	MeshTransfer transfer[NUM_THREADS];

	std::vector<int> anchors;
	anchors.push_back(698);

	std::vector<Eigen::Vector2i> pairs;

	//pairs.push_back(Eigen::Vector2i(2769, 470));
	pairs.push_back(Eigen::Vector2i(0, 0));
	//pairs.push_back(Eigen::Vector2i(87, 23));
	//pairs.push_back(Eigen::Vector2i(147, 4650));


	//pairs.push_back(Eigen::Vector2i(2800, 290));
	//pairs.push_back(Eigen::Vector2i(243, 2558));
	//pairs.push_back(Eigen::Vector2i(388, 2773));

	for (int i = 0; i < NUM_THREADS; i++)
	{
		if (!transfer[i].init((int)triangles.size(), triangles.data(), (int)srcVerts0.size(), srcVerts0.data(), tarVerts0.data(), anchors, pairs))
		{
			printf("[thread=%d]: %s\n", i, transfer[i].getErrString());
			return -1;
		}
	}

	#pragma omp parallel for num_threads(NUM_THREADS)
	for (int iMesh = 1; iMesh < 2; iMesh++)
	{
		const int tid = omp_get_thread_num();

		ObjMesh tarMesh1, srcMesh1;
		std::vector<MeshTransfer::Float3> tarVerts1;
		tarMesh1.cloneFrom(&tarMesh0);

		std::string sourceMeshName(src_folder + std::to_string(iMesh) + ".obj");
		if (!srcMesh1.loadObj(sourceMeshName.c_str(), false, false))
		{
			printf("warning, source mesh not found: %s\n", sourceMeshName.c_str());
			continue;
		}

		gtime_t tbegin = ldp::gtime_now();

		objMeshGetVerts(srcMesh1, srcVerts1);
		if (!transfer[tid].transfer(srcVerts1, tarVerts1))
		{
			printf("%s\n", transfer[tid].getErrString());
			continue;
		}
		objMeshSetVerts(tarMesh1, tarVerts1);

		gtime_t tend = ldp::gtime_now();
		printf("transfer time[%d]: %f sec\n", iMesh, ldp::gtime_seconds(tbegin, tend));

		tarMesh1.saveObj((result_folder + std::to_string(iMesh) + ".obj").c_str());
	}
	
    return 0;
}

